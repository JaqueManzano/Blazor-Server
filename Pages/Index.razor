@page "/"
@using BaltinhaTest.Models;
@using RestSharp;

<PageTitle>Categorias</PageTitle>

<h1>Categorias</h1>

@if (_categories is null)
{
	<p><em>Loading...</em></p>
}
else
{
	<table class="table">
		<thead>
			<tr>
				<th>ID</th>
				<th>Title</th>
				<th>Description</th>
				<th></th>
			</tr>
		</thead>
		<tbody>
			@foreach (var item in _categories)
			{
				<tr>
					<td>@item.Id</td>
					<td>@item.Title</td>
					<td>@item.Description</td>
					<td>
						<button class="btn btn-info" @onclick="() => GetAsync(item.Id)">
							Editar
						</button>
						<button class="btn btn-danger" @onclick="() => DeleteAsync(item.Id)">
							Deletar
						</button>
					</td>
				</tr>
			}
		</tbody>
	</table>
}

<hr />

<div class="mb-3">
	<label class="form-label">Id</label>
	<input type="text" class="form-control" readonly @bind-value="@_category.Id">
</div>
<div class="mb-3">
	<label class="form-label">Title</label>
	<input type="text" class="form-control" @bind-value="@_category.Title">
</div>
<div class="mb-3">
	<label class="form-label">Description</label>
	<input type="text" class="form-control" @bind-value="@_category.Description">
</div>


@if (_deleted)
{
	<div role="alert" class="alert alert-danger">
		Categoria excluída com sucesso!
	</div>

}

<button class="btn btn-primary" @onclick="UpsertAsync">
	@if (_category.Id is not 0)
	{
		<span>Salvar</span>
	}

	else
	{
		<span>Cadastrar</span>
	}

</button>
@if (_category.Id is not 0)
{
	<button class="btn btn-info" @onclick="New">Novo</button>
}

@code {
	private bool _deleted;
	private List<Category>? _categories;
	private Category? _category = new();

	protected override async Task OnInitializedAsync()
	{
		await Task.Delay(500);
		var client = new RestClient();
		var request = new RestRequest($"{Configuration.ApiUrl}/v1/categories");
		_categories = await client.GetAsync<List<Category>?>(request);
		_deleted = false;
		//_categories = await Http.GetFromJsonAsync<Category[]>("v1/categories");
	}


	private async Task UpsertAsync()
	{
		var client = new RestClient();

		if (_category?.Id == 0)
		{
			var request = new RestRequest($"{Configuration.ApiUrl}/v1/categories").AddBody(_category);
			var category = await client.PostAsync<Category>(request);

			if (category is not null)
			{
				_categories?.Add(category);
				New();
			}
		}
		else
		{
			var request = new RestRequest($"{Configuration.ApiUrl}/v1/categories/{_category.Id}").AddBody(_category);
			await client.PutAsync<Category>(request);

			var category = _categories?.FirstOrDefault(x => x.Id == _category.Id);

			if (category is not null)
			{
				category.Title = _category.Title;
				category.Description = _category.Description;
				New();
			}
		}

		_deleted = false;
	}

	private async Task GetAsync(int id)
	{
		var client = new RestClient();
		var request = new RestRequest($"{Configuration.ApiUrl}/v1/categories/{id}");
		_category = await client.GetAsync<Category?>(request);
		_deleted = false;
	}

	private async Task DeleteAsync(int id)
	{
		var client = new RestClient();
		var request = new RestRequest($"{Configuration.ApiUrl}/v1/categories/{id}");
		var category = await client.DeleteAsync<Category?>(request);

		if (category is not null)
		{
			var deleted = _categories.Find(x => x.Id == id);
			if (deleted is not null)
				_categories.Remove(deleted);
		}

		var teste =
	_deleted = true;
	}
	private void New()
	{
		_category = new();
		_deleted = false;
	}
}